- Vex Code Snippets/
  - docs/
    - turning_left.md
    - turning_right.md
    - controlling_motor_speed.md
    - obstacle_sensing.md
    - line_following.md
    - using_sensors.md
    - autonomous_routines.md



Docs 
2. [Turning Left](#turning-left)
3. [Turning Right](#turning-right)
4. [Controlling Motor Speed](#controlling-motor-speed)
5. [Obstacle Sensing](#obstacle-sensing)
6. [Line Following](#line-following)
7. [Using Sensors](#using-sensors)
8. [Implementing Autonomous Routines](#implementing-autonomous-routines)


Snippets
## Turning Left

### Description

This code snippet illustrates how to make the Vex V5 Robot turn left by a specified angle.

### Usage

```python
drivetrain.turn_for(LEFT, angle, DEGREES)
```

- Replace `angle` with the desired angle in degrees (e.g., 90, 180).

## Turning Right

### Description

This code snippet showcases how to make the Vex V5 Robot turn right by a specified angle.

### Usage

```python
drivetrain.turn_for(RIGHT, angle, DEGREES)
```

- Replace `angle` with the desired angle in degrees (e.g., 90, 180).

## Controlling Motor Speed

### Description

This code snippet demonstrates how to control the speed of a motor connected to the Vex V5 Robot.

### Usage

```python
motor.set_velocity(speed, PERCENT)
```

- Replace `speed` with the desired speed percentage (e.g., 50, 75).

## Obstacle Sensing

### Description

This code snippet shows how to use sensors to detect obstacles and make the robot react accordingly.

### Usage

```python
while distance_sensor.distance(MM) > threshold:
    # Perform actions when no obstacle is detected
    # ...
```

- Replace `distance_sensor` with the appropriate sensor object.
- Replace `threshold` with the desired distance threshold in millimeters.

## Line Following

### Description

This code snippet demonstrates how to implement line following behavior using a line tracking sensor.

### Usage

```python
while True:
    if line_tracker.line_detected():
        # Perform actions when the line is detected
        # ...
    else:
        # Perform actions when the line is not detected
        # ...
```

- Replace `line_tracker` with the appropriate line tracking sensor object.

## Using Sensors

### Description

This code snippet showcases the usage of various sensors, such as the gyro, distance, and line tracking sensors.

### Usage

```python
gyro_sensor.get_rotation()
distance_sensor.distance(MM)
line_tracker.line_detected()
```

- Replace `gyro_sensor`, `distance_sensor`, and `line_tracker` with the appropriate sensor objects.

## Implementing Autonomous Routines

### Description

This code snippet provides an example of implementing autonomous routines using a combination of driving, turning, and sensor-based actions.

### Usage

```python
# Code snippet for autonomous routine
# ...
```

- Replace the code within the snippet with your custom autonomous routine.

## Conclusion